<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_player)){
view_xview = obj_player.x - view_wview / 2;
y = obj_player.y;
view_yview = y - (display_get_gui_height() / 2);
}else if(instance_exists(obj_player_sq)){
view_xview = obj_player_sq.x - view_wview / 2;
y = obj_player_sq.y;
view_yview = y - (display_get_gui_height() / 2);
}else{
view_xview = player_scene.x - view_wview / 2;
y = player_scene.y;
view_yview = y - (display_get_gui_height() / 2);
}
init_y = view_hview;
init_x = view_wview;
scale_prev = 1;
global.sq_transition = false;
wplayer = 0;
global.sq = false;
instance_exist = true;
global.camera = obj_player;
pdist = 61;
hslastx = 0;
hslasty = 0;
mchange = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room != 13){
if(instance_exists(obj_player)){
view_xview = obj_player.x - view_wview / 2;
if(global.sq_transition == true){
view_yview = obj_player.y - view_hview / 2;
global.sq_transition = false;
}else{
if(obj_player.y &lt; view_yview + display_get_gui_height() - (view_wview / 4) || obj_player.y &gt; view_yview + display_get_gui_height() - (view_hview / 4)){
move_towards_point(x,obj_player.y,5 + abs(obj_player.vspeed * 0.5));
}
if(abs(obj_player.y - y) &lt;= 64){
vspeed = 0;
}
view_yview = y - (display_get_gui_height() / 2);
if((abs(obj_player.hspeed) &gt; abs(hslastx)  || abs(obj_player.vspeed) &gt; hslasty) &amp;&amp; (abs(obj_player.hspeed) &gt; 60 || abs(obj_player.vspeed) &gt; 40)){
view_wview += obj_player.speed * 2;
view_hview += obj_player.speed * 2;
view_xview -= obj_player.speed;
view_yview -= obj_player.speed;
mchange = obj_player.speed;
}else if(obj_player.speed + 15 &lt; mchange &amp;&amp; view_wview &gt;= 1024){
view_wview -= (mchange * 2) / 4;
view_hview -= (mchange * 2) / 4;
view_xview += mchange / 4;
view_yview += mchange / 4;
}
hslastx = obj_player.hspeed;
hslasty = obj_player.vspeed;
}
}else if(instance_exists(obj_player_sq)){
view_xview = obj_player_sq.x - view_wview / 2;
view_yview = obj_player_sq.y - view_hview / 2;
global.sq_transition = true;
}
}else{
icount = instance_number(obj_player);
if(icount == 0){
player1 = instance_find(obj_player_sq,0);
player2 = instance_find(obj_player_sq,1);
}else if(icount == 1){
player1 = instance_find(obj_player,0);
player2 = instance_find(obj_player_sq,0);
}else if(icount == 2){
player1 = instance_find(obj_player,0);
player2 = instance_find(obj_player,1);
}
with(player1){
if(obj_camera.player2.x &lt; x){
global.camera = obj_camera.player2;
if(obj_camera.icount &lt;= 1){
global.sq = true;
}else{
global.sq = false;
}
}else{
global.camera = obj_camera.player1;
if(obj_camera.icount == 0){
global.sq = true;
}else{
global.sq = false;
}
}
dist = abs(x - obj_camera.player2.x);
if(dist &gt; obj_camera.pdist){
view_wview += dist - obj_camera.pdist;
view_hview += dist - obj_camera.pdist;
obj_camera.pdist = dist;
}else if(dist &lt; obj_camera.pdist &amp;&amp; view_wview &gt; 1024){
view_wview -= obj_camera.pdist - dist;
view_hview -= obj_camera.pdist - dist;
obj_camera.pdist = dist;
}
}
with(global.camera){
if(global.sq == false){
view_xview = global.camera.x - 128;
if(global.sq_transition == true){
view_yview = y - view_hview / 2;
global.sq_transition = false;
}else{
if(y &lt; view_yview + display_get_gui_height() - (view_wview / 4) || y &gt; view_yview + display_get_gui_height() - (view_hview / 4)){
with(obj_camera){
move_towards_point(x,obj_player.y,5 + abs(obj_player.vspeed * 0.5));
}
}
if(abs(y - obj_camera.y) &lt;= 64){
obj_camera.vspeed = 0;
}
view_yview = obj_camera.y - (display_get_gui_height() / 2);
}
}else{
view_xview = x - view_wview / 2;
view_yview = y - view_hview / 2;
global.sq_transition = true;
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
